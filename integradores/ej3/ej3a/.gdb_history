n
make
run
n
p *((caso_t*) $rdi)
p *((caso_t*) $rdi + 1)
p *((caso_t*) $rdi + 2)
n
p *((caso_t*) $r12 + 2)
n
n
si
n
n
make
run
n
si
n
make
makemake
make
run
n
si
n
p $esi
p $r8d
make
run
n
si
r
n
make
run
n
si
n
make
run
n
si
n
run
n
si
n
p $r9 + 4
p ($r9 + 4)
p *($r9 + 4)
p *((usuario_t) $r9 + 4)
p *((usuario_t*) $r9 + 4)
p *((usuario_t*) $r9 + 0)
n
p $r10
p $r10d
make
run
n
si
n
p $r10d
n
make
run
make
make
run
n
si
n
p $r10d
n
p $r10d
p $r8
make
MAKE
make
make
make
run
n
si
n
p $r14
p *(($r14))
p *($r14)
p *($r14 + 1)
p *($r14 + 0)
p *($r14 + 2)
p *($r14 + 3)
p *($r14 + 0)
p *($rax + 0)
p ($rax + 0)
p ($rax + 1)
p ($rax + 2)
p $rax
n
n
make
run
n
si
p $rax
p $r8
p $r8+1
p $r8+2
p ($r8)
p ($r8 + 1)
p ($r8)
make
make
make
$r14
p $r14
p $r14 + 1
n
n
n
run
n
p $r14
p *($r14)
p *($r14 + 1)
p *($r14 + 2)
p *($r14 + 3)
p *((uint32_t) $r14)
p *((uint32_t) $r14 + 3)
p *((uint32_t) $r14 + )
p *((uint32_t) $r14 + 2)
p *((uint32_t) $r14 + 1)
p *((uint32_t) $r14 + 0)
p ((uint32_t*) $r14 + 0)
p ((uint32_t*) $r14 + 1)
p *((uint32_t*) $r14 + 1)
p *((uint32_t*) $r14 + 2)
p *((uint32_t*) $r14 + 1)
p *((uint32_t*) $r14 + 0)
p *((uint32_t*) $r14 + 3)
p *((uint32_t*) $r14 + 4)
p *((uint32_t*) $r14 + 5)
exit
run
n
run
b segmentar_casos
run
n
run
n
make
run
n
make
exit
b segmentar_casos
run
n
si
n
p *((caso_t*) $r9)
p $r10
p $r8
p $r13
p $r10
p $r12
p ($r12
p *((caso_t*) $r12)
p *((caso_t*) $r12 + 1)
p *((caso_t*) $r12 + 2)
p $r10
p *((caso_t*) $r12 + 0)
p *((caso_t*) $r9)
n
run
n
p *((caso_t*) $r12 + 0)
p *((caso_t*) $r12 + 0)+0
p *((caso_t*) $r12 + 0) -> 0
p *((caso_t*) $r12 + 0) -> categoria
p $r9
p *((caso_t*) $r9)
make
run
n
run
n
p $rsi
n
run
n
n
make
run
n
run
make
run
n
make
run
n
run
n
make
run
n
make
run
make
make
run
n
make
run
n
run
n
n
n
n
n
n
n
make
run
n
si
n
make
git add. 
make
make
run
n
run
n
si
n
make
make
make
make
./test_asm
quit
b segmentar_casos
run
n
si
n
si
n
n
make
exit
